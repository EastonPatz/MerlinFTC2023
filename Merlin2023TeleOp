package org.firstinspires.ftc.teamcode;


import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
//import com.qualcomm.robotcore.hardware.CRServo;
//import org.firstinspires.ftc.robotcore.external.navigation.Position;
//import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;

import java.lang.Math;

@TeleOp (group = "Merlin", name = "Test TeleOp 2022")
public class Merlin2023TeleOp extends LinearOpMode {
    DcMotor frontLeftMotor, frontRightMotor, backLeftMotor, backRightMotor, viperSlide;
    Servo servo1, servo2, servo3, servo4, servo5, servo6;



    @Override
    public void runOpMode() throws InterruptedException {
        frontLeftMotor = hardwareMap.dcMotor.get("frontLeft");
        frontRightMotor = hardwareMap.dcMotor.get("frontRight");
        backLeftMotor = hardwareMap.dcMotor.get("backLeft");
        backRightMotor = hardwareMap.dcMotor.get("backRight");
        viperSlide = hardwareMap.dcMotor.get("viperSlide");
        frontLeftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        frontRightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backLeftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backRightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        frontLeftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        frontRightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backLeftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backRightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        viperSlide.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        viperSlide.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        viperSlide.setDirection(DcMotor.Direction.REVERSE);
        viperSlide.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        servo1 = hardwareMap.servo.get("servo1");
        servo2 = hardwareMap.servo.get("servo2");
        servo3 = hardwareMap.servo.get("servo3");
        servo4 = hardwareMap.servo.get("servo4");
        servo4.scaleRange(0,10);
        servo5 = hardwareMap.servo.get("servo5");
        servo6 = hardwareMap.servo.get("servo6");
        servo6.setDirection(Servo.Direction.REVERSE);

        servo1.setPosition(0.3);
        servo2.setPosition(0.45);
        servo3.setPosition(0.3);
        servo4.setPosition(10);
        servo5.setPosition(0.7);
        servo6.setPosition(0.3);

        double armPosition = 0.3;
        double wristPosition = 0.45;
        double handPosition = 0.3;
        double extensionPosition = 10;
        double dumper = 0.7;

        boolean cycle = false;

        waitForStart();


        while (opModeIsActive()) {
            double p1 = gamepad1.left_stick_x - gamepad1.left_stick_y + gamepad1.right_stick_x;
            double p2 = -gamepad1.left_stick_x - gamepad1.left_stick_y - gamepad1.right_stick_x;
            double p3 = -gamepad1.left_stick_x - gamepad1.left_stick_y + gamepad1.right_stick_x;
            double p4 = gamepad1.left_stick_x - gamepad1.left_stick_y - gamepad1.right_stick_x;
            double max = Math.max(1.0, Math.abs(p1));
            max = Math.max(max, Math.abs(p2));
            max = Math.max(max, Math.abs(p3));
            max = Math.max(max, Math.abs(p4));
            p1 /= max;
            p2 /= max;
            p3 /= max;
            p4 /= max;
            if (gamepad1.a) {
                p1 *= 0.25;
                p2 *= 0.25*.9;
                p3 *= 0.25*.9;
                p4 *= 0.25*.9;
            } else {
                p1 *= 0.75;
                p2 *= 0.75*.9;
                p3 *= 0.75*.9;
                p4 *= 0.75*.9;
            }
            if (gamepad1.b) {
                frontLeftMotor.setPower(p4);
                frontRightMotor.setPower(-p3);
                backLeftMotor.setPower(p2);
                backRightMotor.setPower(-p1);
            } else {
                frontLeftMotor.setPower(-p1);
                frontRightMotor.setPower(p2);
                backLeftMotor.setPower(-p3);
                backRightMotor.setPower(p4);
            }

            if (gamepad2.left_trigger >  0.5 && gamepad2.right_trigger > 0.5) {
                //Cycle 1: Move arm down (can also send viper slide up but never one first run through)
                if (gamepad2.left_trigger >  0.5 && gamepad2.right_trigger > 0.5) {
                    int sleep = 1000;
                    if (!(cycle) && (viperSlide.getCurrentPosition() < -50 || viperSlide.getCurrentPosition() > 150)) {
                        viperSlide.setTargetPosition(50);
                        viperSlide.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                        if (viperSlide.getCurrentPosition() < -50) {
                            viperSlide.setPower(1);
                            telemetry.addData("1a: ", " %d", 1);
                            telemetry.update();
                            sleep = 2000;
                        } else {
                            viperSlide.setPower(0);
                        }
                    } else if (cycle && (viperSlide.getCurrentPosition() < -4250 || viperSlide.getCurrentPosition() > -4050)) {
                        viperSlide.setTargetPosition(-4150);
                        viperSlide.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                        viperSlide.setPower(-1);
                        telemetry.addData("1b: ", " %d", 1);
                        telemetry.update();
                        sleep = 2000;
                    }
                    servo1.setPosition(0.725);
                    servo6.setPosition(0.725);
                    servo2.setPosition(0.85);
                    servo4.setPosition(0.6);
                    sleep(sleep);

                    viperSlide.setPower(0);
                    sleep(1);
                }

                viperSlide.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                //Cycle 2: Grab cone (can also drop cone off)
                if (gamepad2.left_trigger >  0.5 && gamepad2.right_trigger > 0.5) {
                    if (cycle) {
                        servo5.setPosition(0.3);
                        sleep(500);
                    }
                    servo3.setPosition(0.8);
                    sleep(500);
                }
                //Cycle 3: Arm in (can also bring viper slide in)
                if (gamepad2.left_trigger >  0.5 && gamepad2.right_trigger > 0.5) {

                    if (cycle && (viperSlide.getCurrentPosition() < 100 || viperSlide.getCurrentPosition() > 300)) {
                        viperSlide.setTargetPosition(200);
                        viperSlide.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                        if (viperSlide.getCurrentPosition() < 200) {
                            viperSlide.setPower(-1);
                            telemetry.addData("3: "," %d", 3);
                            telemetry.update();
                        } else {
                            viperSlide.setPower(0);
                        }
                    }
                    servo1.setPosition(0.35);
                    servo6.setPosition(0.35);
                    servo4.setPosition(1);
                    servo5.setPosition(0.725);
                    sleep(1600);
                    servo2.setPosition(0.25);

                    sleep(400);

                    viperSlide.setPower(0);
                    sleep(1);
                }

                viperSlide.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                //Cycle 4: Puts cone in viper slide
                if (gamepad2.left_trigger >  0.5 && gamepad2.right_trigger > 0.5) {
                    servo3.setPosition(0.3);
                    sleep(500);
                    cycle = true;
                }
            } else {
                cycle = false;
            }

           
            
            if (gamepad2.a) {
                armPosition = 0.725;
                wristPosition = 0.9;
                extensionPosition = 6;

            } else if (gamepad2.b) {
                armPosition = 0.325;
                wristPosition = 0.45;
                extensionPosition = 10;
            }
            if (gamepad2.left_bumper) {
                handPosition = 0.8;
            } else {
                handPosition = 0.3;
            }
            if (gamepad1.left_bumper) {
                dumper = 0.3;
            } else {
                dumper = 0.7;
            }
            /*if (gamepad2.right_bumper) {
                dumper = 0.3;
            } else {
                dumper = 0.8;
            }*/
            armPosition = Range.clip(armPosition, 0, 1);
            wristPosition = Range.clip(wristPosition, 0, 1);
            handPosition = Range.clip(handPosition, 0, 1);
            extensionPosition = Range.clip(extensionPosition, 0, 10);
            dumper = Range.clip(dumper, 0, 1);
            servo1.setPosition(armPosition);
            servo6.setPosition(armPosition);
            servo2.setPosition(wristPosition);
            servo3.setPosition(handPosition);
            servo4.setPosition(extensionPosition/10);
            servo5.setPosition(dumper);

            //Viper Slide Trigger Controls
            double viperPower = 0;
            if (viperSlide.getCurrentPosition() <= -250 && viperSlide.getCurrentPosition() >= -4150) {
                viperPower = (gamepad1.left_trigger-gamepad1.right_trigger);
            } else if ((viperSlide.getCurrentPosition() > -250 && viperSlide.getCurrentPosition() <= 0) || (viperSlide.getCurrentPosition() < -4150 && viperSlide.getCurrentPosition() >= -4300)) {
                viperPower = (gamepad1.left_trigger-gamepad1.right_trigger)/2;
            } else if (viperSlide.getCurrentPosition() < 500 && viperSlide.getCurrentPosition() > 0) {
                viperPower = (gamepad1.left_trigger-gamepad1.right_trigger)/5;
            } else if (viperSlide.getCurrentPosition() >= 500) {
                viperPower = 0;
            }

            //Viper Slide DPad Controls and Powering
            if (gamepad1.dpad_right) {
                if (!((viperSlide.getCurrentPosition() < -4050) && (viperSlide.getCurrentPosition() > -4250))) {
                    if (viperSlide.getCurrentPosition() < -4150) {
                        viperSlide.setPower(1);
                    } else if (viperSlide.getCurrentPosition() > -4150) {
                        viperSlide.setPower(-1);
                    }

                } else {
                    viperSlide.setPower(0);
                }
            } else if (gamepad1.dpad_up) {
                if (!((viperSlide.getCurrentPosition() < -1925) && (viperSlide.getCurrentPosition() > -2125))) {
                    if (viperSlide.getCurrentPosition() < -2025) {
                        viperSlide.setPower(1);
                    } else if (viperSlide.getCurrentPosition() > -2025) {
                        viperSlide.setPower(-1);
                    }
                } else {
                    viperSlide.setPower(0);
                }
            } else if (gamepad1.dpad_left) {
                if (!((viperSlide.getCurrentPosition() < -625) && (viperSlide.getCurrentPosition() > -825))) {
                    if (viperSlide.getCurrentPosition() < -725) {
                        viperSlide.setPower(1);
                    } else if (viperSlide.getCurrentPosition() > -725) {
                        viperSlide.setPower(-1);
                    }
                } else {
                    viperSlide.setPower(0);
                }
            } else if (gamepad1.dpad_down) {
                if (!((viperSlide.getCurrentPosition() < 300) && (viperSlide.getCurrentPosition() > 100))) {
                    if (viperSlide.getCurrentPosition() < 200) {
                        viperSlide.setPower(1);
                    } else if (viperSlide.getCurrentPosition() > 200) {
                        viperSlide.setPower(-1);
                    }
                } else {
                    viperSlide.setPower(0);
                }
            } else {
                viperSlide.setPower(viperPower);
            }

            telemetry.addData("Encoders", " %d %d %d %d", frontLeftMotor.getCurrentPosition(), frontRightMotor.getCurrentPosition(),
                    backLeftMotor.getCurrentPosition(), backRightMotor.getCurrentPosition());
            telemetry.addData("Viper Encoder"," %d", viperSlide.getCurrentPosition());
            telemetry.update();
        }
    }
}
