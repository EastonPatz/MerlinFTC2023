package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import org.firstinspires.ftc.teamcode.SleeveDetection_Copy;
import org.openftc.easyopencv.OpenCvCamera;
import org.openftc.easyopencv.OpenCvCameraFactory;
import org.openftc.easyopencv.OpenCvCameraRotation;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;

@Autonomous(group = "Merlin2023", name = "Mecanum Auto (Right) REAL")
public class Merlin2023AutoRight extends LinearOpMode {
    DcMotor frontLeftMotor, frontRightMotor, backLeftMotor, backRightMotor, viperSlide;
    Servo servo1, servo2, servo3, servo4, servo5;
    private SleeveDetection_Copy sleeveDetection;
    //private PoleDetection poleDetection;
    private OpenCvCamera camera;
    private String webcamName = "Webcam 1";


    @Override
    public void runOpMode() throws InterruptedException {
        frontLeftMotor = hardwareMap.dcMotor.get("frontLeft");
        frontRightMotor = hardwareMap.dcMotor.get("frontRight");
        backLeftMotor = hardwareMap.dcMotor.get("backLeft");
        backRightMotor = hardwareMap.dcMotor.get("backRight");
        viperSlide = hardwareMap.dcMotor.get("viperSlide");
        frontLeftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        frontRightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backLeftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backRightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        viperSlide.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        frontLeftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        frontRightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backLeftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backRightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        viperSlide.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        viperSlide.setDirection(DcMotor.Direction.REVERSE);
        viperSlide.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        servo1 = hardwareMap.servo.get("servo1");
        servo2 = hardwareMap.servo.get("servo2");
        servo3 = hardwareMap.servo.get("servo3");
        servo4 = hardwareMap.servo.get("servo4");
        servo5 = hardwareMap.servo.get("servo5");
        servo1.setPosition(0.3);
        servo2.setPosition(0.45);
        servo3.setPosition(0.3);
        servo4.setPosition(10);
        servo5.setPosition(0.75);

        String park = "LEFT";


        int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        camera = OpenCvCameraFactory.getInstance().createWebcam(hardwareMap.get(WebcamName.class, webcamName), cameraMonitorViewId);
        sleeveDetection = new SleeveDetection_Copy();
        //poleDetection = new PoleDetection();
        camera.setPipeline(sleeveDetection);

        camera.openCameraDeviceAsync(new OpenCvCamera.AsyncCameraOpenListener()
        {
            @Override
            public void onOpened()
            {
                camera.startStreaming(320,240, OpenCvCameraRotation.UPRIGHT);
            }

            @Override
            public void onError(int errorCode) {}
        });

        while (!isStarted()) {
            park = sleeveDetection.getPosition().toString(); //.toString()
            telemetry.addData("ROTATION: ", park);
            telemetry.update();
        }



        waitForStart();
        if (opModeIsActive()) {
            //move to cycle
            move(1800, 0.6);
            reset();
            freeze(250);
            turnLeft(1100, 0.6);
            reset();
            freeze(250);
            move(-250, 0.6);
            reset();
            freeze(250);
            moveSide(-100, 0.6);
            //cycle x4 (if we can)
            cycle1b(.625, 1, 0.585);//0.725, 0.85, 0.6
            reset();
            cycle2b();
            reset();
            cycle3b();
            reset();
            cycle4();
            reset();
            cycle1b(.65, .8875, 0.6);
            reset();
            cycle2b();
            reset();
            cycle3b();
            reset();
            cycle4();
            reset();
            /*cycle1b();
            reset();
            cycle2b();
            reset();
            cycle3b();
            reset();
            cycle4();
            reset();
            cycle1b();
            reset();
            cycle2b();
            reset();
            cycle3b();
            reset();
            cycle4();
            reset();
            //park
            turnRight(1200, 0.6);
            reset();
            move(-1500, 0.6);
            reset();
            parking(park);
            reset();*/
            

        }
    }
    
    public void freeze(int time) {
        frontLeftMotor.setPower(0);
        frontRightMotor.setPower(0);
        backLeftMotor.setPower(0);
        backRightMotor.setPower(0);
        sleep(time);
    }

    public void reset() {
        telemetry.addData("Encoders", " %d %d %d %d", frontLeftMotor.getCurrentPosition(), frontRightMotor.getCurrentPosition(),
                backLeftMotor.getCurrentPosition(), backRightMotor.getCurrentPosition());
        telemetry.update();
        frontLeftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        frontRightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backLeftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backRightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        //Reset wheels but NOT viper slide
        frontLeftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        frontRightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backLeftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backRightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        viperSlide.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    }


    //2200 for 1 block  - incorrect prob 900
    public void move(int encoder, double speed) {
        frontLeftMotor.setTargetPosition(encoder);
        frontRightMotor.setTargetPosition(-encoder);
        backLeftMotor.setTargetPosition(encoder);
        backRightMotor.setTargetPosition(-encoder);
        frontLeftMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        frontRightMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backLeftMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backRightMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        frontLeftMotor.setPower(speed);
        frontRightMotor.setPower(speed*.8);
        backLeftMotor.setPower(speed);
        backRightMotor.setPower(speed*.8);
        while(frontLeftMotor.isBusy()) {

        }
    }
    public void moveSide(int encoder, double speed) {
        frontLeftMotor.setTargetPosition(encoder);
        frontRightMotor.setTargetPosition(encoder);
        backLeftMotor.setTargetPosition(-encoder);
        backRightMotor.setTargetPosition(-encoder);
        frontLeftMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        frontRightMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backLeftMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backRightMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        frontLeftMotor.setPower(speed);
        frontRightMotor.setPower(speed*.8);
        backLeftMotor.setPower(speed);
        backRightMotor.setPower(speed*.8);
        while(frontLeftMotor.isBusy()) {

        }
    }

    //2100 for 90 degree  - incorrect prob 800
    public void turnLeft(int encoder, double speed) {
        frontLeftMotor.setTargetPosition(encoder);
        frontRightMotor.setTargetPosition(encoder);
        backLeftMotor.setTargetPosition(encoder);
        backRightMotor.setTargetPosition(encoder);
        frontLeftMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        frontRightMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backLeftMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backRightMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        frontLeftMotor.setPower(speed);
        frontRightMotor.setPower(speed*.8);
        backLeftMotor.setPower(speed);
        backRightMotor.setPower(speed*.8);
        while(frontLeftMotor.isBusy()) {

        }
    }

    public void turnRight(int encoder, double speed) {
        frontLeftMotor.setTargetPosition(-encoder);
        frontRightMotor.setTargetPosition(-encoder);
        backLeftMotor.setTargetPosition(-encoder);
        backRightMotor.setTargetPosition(-encoder);
        frontLeftMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        frontRightMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backLeftMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backRightMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        frontLeftMotor.setPower(speed);
        frontRightMotor.setPower(speed*.8);
        backLeftMotor.setPower(speed);
        backRightMotor.setPower(speed*.8);
        while(frontLeftMotor.isBusy()) {

        }
    }
    

    public void cycle1a() {
        frontLeftMotor.setPower(0);
        frontRightMotor.setPower(0);
        backLeftMotor.setPower(0);
        backRightMotor.setPower(0);
        if (viperSlide.getCurrentPosition() < -100 || viperSlide.getCurrentPosition() > 100) {
            viperSlide.setTargetPosition(0);
            viperSlide.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            viperSlide.setPower(1);
        } else {
            viperSlide.setPower(0);
        }
        servo1.setPosition(0.725);
        servo2.setPosition(0.85);
        servo4.setPosition(0.6);
        sleep(2000);
        frontLeftMotor.setPower(0);
        frontRightMotor.setPower(0);
        backLeftMotor.setPower(0);
        backRightMotor.setPower(0);
        viperSlide.setPower(0);
        sleep(1);
    }
    public void cycle1b(double a, double b, double c) {
        frontLeftMotor.setPower(0);
        frontRightMotor.setPower(0);
        backLeftMotor.setPower(0);
        backRightMotor.setPower(0);
        if (viperSlide.getCurrentPosition() < -4550 || viperSlide.getCurrentPosition() > -4350) {
            viperSlide.setTargetPosition(-4450);
            viperSlide.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            viperSlide.setPower(1);
        } else {
            viperSlide.setPower(0);
        }
        servo1.setPosition(a);//0.725
        servo2.setPosition(b);//0.85
        servo4.setPosition(c);//0.6
        sleep(2000);
        frontLeftMotor.setPower(0);
        frontRightMotor.setPower(0);
        backLeftMotor.setPower(0);
        backRightMotor.setPower(0);
        viperSlide.setPower(0);
        sleep(1);
    }
    public void cycle2a() {
        frontLeftMotor.setPower(0);
        frontRightMotor.setPower(0);
        backLeftMotor.setPower(0);
        backRightMotor.setPower(0);
        servo3.setPosition(0.7);
        sleep(500);
    }
    public void cycle2b() {
        frontLeftMotor.setPower(0);
        frontRightMotor.setPower(0);
        backLeftMotor.setPower(0);
        backRightMotor.setPower(0);
        servo5.setPosition(0.3);
        sleep(500);
        frontLeftMotor.setPower(0);
        frontRightMotor.setPower(0);
        backLeftMotor.setPower(0);
        backRightMotor.setPower(0);
        servo3.setPosition(0.7);
        sleep(500);
    }
    public void cycle3a() {
        frontLeftMotor.setPower(0);
        frontRightMotor.setPower(0);
        backLeftMotor.setPower(0);
        backRightMotor.setPower(0);
        servo1.setPosition(0.375);
        servo4.setPosition(1);
        servo5.setPosition(0.75);
        sleep(1250);
        frontLeftMotor.setPower(0);
        frontRightMotor.setPower(0);
        backLeftMotor.setPower(0);
        backRightMotor.setPower(0);
        servo2.setPosition(0.25);

        sleep(750);
    }
    public void cycle3b() {
        frontLeftMotor.setPower(0);
        frontRightMotor.setPower(0);
        backLeftMotor.setPower(0);
        backRightMotor.setPower(0);
        if (viperSlide.getCurrentPosition() < -100 || viperSlide.getCurrentPosition() > 100) {
            viperSlide.setTargetPosition(0);
            viperSlide.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            viperSlide.setPower(1);
        } else {
            viperSlide.setPower(0);
        }

        servo1.setPosition(0.375);
        servo4.setPosition(1);
        servo5.setPosition(0.75);
        sleep(1250);
        frontLeftMotor.setPower(0);
        frontRightMotor.setPower(0);
        backLeftMotor.setPower(0);
        backRightMotor.setPower(0);
        servo2.setPosition(0.25);

        sleep(750);
        move(0, 0);
        viperSlide.setPower(0);
        sleep(1);
    }
    public void cycle4() {
        frontLeftMotor.setPower(0);
        frontRightMotor.setPower(0);
        backLeftMotor.setPower(0);
        backRightMotor.setPower(0);
        servo3.setPosition(0.3);
        sleep(1000);
    }
    public void parking(String park) {
        if (park.equals("LEFT")) {
            moveSide(-900, 0.6);
        } else if (park.equals("RIGHT")) {
            moveSide(900, 0.6);
        }
    }

    public void centerPole() {

    }
}
